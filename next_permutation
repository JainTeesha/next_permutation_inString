public class next_permutation {
    public static void main(String[] args) {
        String str = "abc";
        char[] arr = str.toCharArray();
        if (nextPermutation(arr)) {
            System.out.println(new String(arr));
        } else {
            System.out.println("No next permutation");
        }
    }

    public static boolean nextPermutation(char[] arr) {
        int n = arr.length;
        int i = n - 2;

        // Step 1: Find the rightmost character which is smaller than its next character
        while (i >= 0 && arr[i] >= arr[i + 1]) {
            i--;
        }

        // If no such character is found, the string is the highest permutation
        if (i < 0) {
            return false;
        }

        // Step 2: Find the smallest character on the right of the pivot which is larger than the pivot
        int j = n - 1;
        while (arr[j] <= arr[i]) {
            j--;
        }

        // Step 3: Swap the pivot with the successor
        swap(arr, i, j);

        // Step 4: Reverse the suffix
        reverse(arr, i + 1, n - 1);

        return true;
    }

    private static void swap(char[] arr, int i, int j) {
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static void reverse(char[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }
}
